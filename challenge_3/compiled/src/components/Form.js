import StageOne from './StageOne.js';
import StageTwo from './StageTwo.js';
import StageThree from './StageThree.js';

class Form extends React.Component {
  constructor() {
    super();
    this.state = {
      stageOneComplete: false,
      stageTwoComplete: false,
      stageThreeComplete: false
    };
    this.handleSubmitStageOne = this.handleSubmitStageOne.bind(this);
    this.handleSubmitStageTwo = this.handleSubmitStageTwo.bind(this);
    this.renderStageTwo = this.renderStageTwo.bind(this);
    this.renderStageThree = this.renderStageThree.bind(this);
    this.renderStagePurchase = this.renderStagePurchase.bind(this);
  }

  handleSubmitStageOne(event) {
    console.log('Submit from Stage One Form Handler!');
    event.preventDefault();
    const data = new FormData(event.target);

    fetch('/submit', {
      method: 'POST',
      body: data
    });
  }
  handleSubmitStageTwo(event) {
    console.log('Submit from Stage Two Form Handler');
    event.preventDefault();
    const data = new FormData(event.target);

    fetch('/submit', {
      method: 'POST',
      body: data
    });
  }
  handleSubmitStageThree(event) {
    console.log('Submit from Stage Three Form Handler');
    event.preventDefault();
    const data = new FormData(event.target);

    fetch('/submit', {
      method: 'POST',
      body: data
    });
  }

  renderStageTwo() {
    console.log('Stage two state altered!');
    this.setState(state => ({
      stageOneComplete: !state.stageOneComplete
    }));
  }
  renderStageThree() {
    console.log('Stage three state altered!');
    this.setState(state => ({
      stageTwoComplete: !state.stageTwoComplete
    }));
  }
  renderStagePurchase() {
    console.log('Stage purchase state altered!');
    this.setState(state => ({
      stageThreeComplete: !state.stageThreeComplete
    }));
  }

  render() {
    if (!this.state.stageOneComplete) {
      return React.createElement(StageOne, { handler: this.handleSubmitStageOne, render: this.renderStageTwo });
    } else if (!this.state.stageTwoComplete) {
      return React.createElement(StageTwo, { handler: this.handleSubmitStageTwo, render: this.renderStageThree });
    } else if (!this.state.stageThreeComplete) {
      return React.createElement(StageThree, { handler: this.handleSubmitStageThree, render: this.renderStagePurchase });
    } else {
      return React.createElement(
        'h1',
        null,
        'PURCHASE PAGE!'
      );
    }
  }
}

export default Form;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0uanN4Il0sIm5hbWVzIjpbIlN0YWdlT25lIiwiU3RhZ2VUd28iLCJTdGFnZVRocmVlIiwiRm9ybSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJzdGF0ZSIsInN0YWdlT25lQ29tcGxldGUiLCJzdGFnZVR3b0NvbXBsZXRlIiwic3RhZ2VUaHJlZUNvbXBsZXRlIiwiaGFuZGxlU3VibWl0U3RhZ2VPbmUiLCJiaW5kIiwiaGFuZGxlU3VibWl0U3RhZ2VUd28iLCJyZW5kZXJTdGFnZVR3byIsInJlbmRlclN0YWdlVGhyZWUiLCJyZW5kZXJTdGFnZVB1cmNoYXNlIiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwicHJldmVudERlZmF1bHQiLCJkYXRhIiwiRm9ybURhdGEiLCJ0YXJnZXQiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJoYW5kbGVTdWJtaXRTdGFnZVRocmVlIiwic2V0U3RhdGUiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFFBQVAsTUFBcUIsZUFBckI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLGVBQXJCO0FBQ0EsT0FBT0MsVUFBUCxNQUF1QixpQkFBdkI7O0FBRUEsTUFBTUMsSUFBTixTQUFtQkMsTUFBTUMsU0FBekIsQ0FBbUM7QUFDakNDLGdCQUFjO0FBQ1o7QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMsd0JBQWtCLEtBRFA7QUFFWEMsd0JBQWtCLEtBRlA7QUFHWEMsMEJBQW9CO0FBSFQsS0FBYjtBQUtBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCQyxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCRCxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtFLGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxDQUFvQkYsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBdEI7QUFDQSxTQUFLRyxnQkFBTCxHQUF3QixLQUFLQSxnQkFBTCxDQUFzQkgsSUFBdEIsQ0FBMkIsSUFBM0IsQ0FBeEI7QUFDQSxTQUFLSSxtQkFBTCxHQUEyQixLQUFLQSxtQkFBTCxDQUF5QkosSUFBekIsQ0FBOEIsSUFBOUIsQ0FBM0I7QUFDRDs7QUFHREQsdUJBQXFCTSxLQUFyQixFQUE0QjtBQUMxQkMsWUFBUUMsR0FBUixDQUFZLHFDQUFaO0FBQ0FGLFVBQU1HLGNBQU47QUFDQSxVQUFNQyxPQUFPLElBQUlDLFFBQUosQ0FBYUwsTUFBTU0sTUFBbkIsQ0FBYjs7QUFFQUMsVUFBTSxTQUFOLEVBQWlCO0FBQ2ZDLGNBQVEsTUFETztBQUVmQyxZQUFNTDtBQUZTLEtBQWpCO0FBSUQ7QUFDRFIsdUJBQXFCSSxLQUFyQixFQUE0QjtBQUMxQkMsWUFBUUMsR0FBUixDQUFZLG9DQUFaO0FBQ0FGLFVBQU1HLGNBQU47QUFDQSxVQUFNQyxPQUFPLElBQUlDLFFBQUosQ0FBYUwsTUFBTU0sTUFBbkIsQ0FBYjs7QUFFQUMsVUFBTSxTQUFOLEVBQWlCO0FBQ2ZDLGNBQVEsTUFETztBQUVmQyxZQUFNTDtBQUZTLEtBQWpCO0FBSUQ7QUFDRE0seUJBQXVCVixLQUF2QixFQUE4QjtBQUM1QkMsWUFBUUMsR0FBUixDQUFZLHNDQUFaO0FBQ0FGLFVBQU1HLGNBQU47QUFDQSxVQUFNQyxPQUFPLElBQUlDLFFBQUosQ0FBYUwsTUFBTU0sTUFBbkIsQ0FBYjs7QUFFQUMsVUFBTSxTQUFOLEVBQWlCO0FBQ2ZDLGNBQVEsTUFETztBQUVmQyxZQUFNTDtBQUZTLEtBQWpCO0FBSUQ7O0FBRURQLG1CQUFpQjtBQUNmSSxZQUFRQyxHQUFSLENBQVksMEJBQVo7QUFDQSxTQUFLUyxRQUFMLENBQWNyQixVQUFXO0FBQ3ZCQyx3QkFBa0IsQ0FBQ0QsTUFBTUM7QUFERixLQUFYLENBQWQ7QUFHRDtBQUNETyxxQkFBbUI7QUFDakJHLFlBQVFDLEdBQVIsQ0FBWSw0QkFBWjtBQUNBLFNBQUtTLFFBQUwsQ0FBY3JCLFVBQVc7QUFDdkJFLHdCQUFrQixDQUFDRixNQUFNRTtBQURGLEtBQVgsQ0FBZDtBQUdEO0FBQ0RPLHdCQUFzQjtBQUNwQkUsWUFBUUMsR0FBUixDQUFZLCtCQUFaO0FBQ0EsU0FBS1MsUUFBTCxDQUFjckIsVUFBVztBQUN2QkcsMEJBQW9CLENBQUNILE1BQU1HO0FBREosS0FBWCxDQUFkO0FBR0Q7O0FBRURtQixXQUFTO0FBQ1AsUUFBSSxDQUFDLEtBQUt0QixLQUFMLENBQVdDLGdCQUFoQixFQUFrQztBQUNoQyxhQUNFLG9CQUFDLFFBQUQsSUFBVSxTQUFTLEtBQUtHLG9CQUF4QixFQUE4QyxRQUFRLEtBQUtHLGNBQTNELEdBREY7QUFHRCxLQUpELE1BSU8sSUFBSSxDQUFDLEtBQUtQLEtBQUwsQ0FBV0UsZ0JBQWhCLEVBQWtDO0FBQ3ZDLGFBQ0Usb0JBQUMsUUFBRCxJQUFVLFNBQVMsS0FBS0ksb0JBQXhCLEVBQThDLFFBQVEsS0FBS0UsZ0JBQTNELEdBREY7QUFHRCxLQUpNLE1BSUEsSUFBSSxDQUFDLEtBQUtSLEtBQUwsQ0FBV0csa0JBQWhCLEVBQW9DO0FBQ3pDLGFBQ0Usb0JBQUMsVUFBRCxJQUFZLFNBQVMsS0FBS2lCLHNCQUExQixFQUFrRCxRQUFRLEtBQUtYLG1CQUEvRCxHQURGO0FBR0QsS0FKTSxNQUlBO0FBQ0wsYUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFHRDtBQUNGO0FBcEZnQzs7QUF1Rm5DLGVBQWViLElBQWYiLCJmaWxlIjoiRm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdGFnZU9uZSBmcm9tICcuL1N0YWdlT25lLmpzJ1xuaW1wb3J0IFN0YWdlVHdvIGZyb20gJy4vU3RhZ2VUd28uanMnO1xuaW1wb3J0IFN0YWdlVGhyZWUgZnJvbSAnLi9TdGFnZVRocmVlLmpzJztcblxuY2xhc3MgRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YWdlT25lQ29tcGxldGU6IGZhbHNlLFxuICAgICAgc3RhZ2VUd29Db21wbGV0ZTogZmFsc2UsXG4gICAgICBzdGFnZVRocmVlQ29tcGxldGU6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdFN0YWdlT25lID0gdGhpcy5oYW5kbGVTdWJtaXRTdGFnZU9uZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0U3RhZ2VUd28gPSB0aGlzLmhhbmRsZVN1Ym1pdFN0YWdlVHdvLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXJTdGFnZVR3byA9IHRoaXMucmVuZGVyU3RhZ2VUd28uYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbmRlclN0YWdlVGhyZWUgPSB0aGlzLnJlbmRlclN0YWdlVGhyZWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbmRlclN0YWdlUHVyY2hhc2UgPSB0aGlzLnJlbmRlclN0YWdlUHVyY2hhc2UuYmluZCh0aGlzKTtcbiAgfVxuXG5cbiAgaGFuZGxlU3VibWl0U3RhZ2VPbmUoZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZygnU3VibWl0IGZyb20gU3RhZ2UgT25lIEZvcm0gSGFuZGxlciEnKVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBGb3JtRGF0YShldmVudC50YXJnZXQpO1xuXG4gICAgZmV0Y2goJy9zdWJtaXQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IGRhdGFcbiAgICB9KTtcbiAgfVxuICBoYW5kbGVTdWJtaXRTdGFnZVR3byhldmVudCkge1xuICAgIGNvbnNvbGUubG9nKCdTdWJtaXQgZnJvbSBTdGFnZSBUd28gRm9ybSBIYW5kbGVyJylcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgRm9ybURhdGEoZXZlbnQudGFyZ2V0KTtcblxuICAgIGZldGNoKCcvc3VibWl0Jywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBkYXRhXG4gICAgfSk7XG4gIH1cbiAgaGFuZGxlU3VibWl0U3RhZ2VUaHJlZShldmVudCkge1xuICAgIGNvbnNvbGUubG9nKCdTdWJtaXQgZnJvbSBTdGFnZSBUaHJlZSBGb3JtIEhhbmRsZXInKVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBGb3JtRGF0YShldmVudC50YXJnZXQpO1xuXG4gICAgZmV0Y2goJy9zdWJtaXQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IGRhdGFcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclN0YWdlVHdvKCkge1xuICAgIGNvbnNvbGUubG9nKCdTdGFnZSB0d28gc3RhdGUgYWx0ZXJlZCEnKVxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKCB7XG4gICAgICBzdGFnZU9uZUNvbXBsZXRlOiAhc3RhdGUuc3RhZ2VPbmVDb21wbGV0ZVxuICAgIH0pKTtcbiAgfVxuICByZW5kZXJTdGFnZVRocmVlKCkge1xuICAgIGNvbnNvbGUubG9nKCdTdGFnZSB0aHJlZSBzdGF0ZSBhbHRlcmVkIScpXG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoIHtcbiAgICAgIHN0YWdlVHdvQ29tcGxldGU6ICFzdGF0ZS5zdGFnZVR3b0NvbXBsZXRlXG4gICAgfSkpO1xuICB9XG4gIHJlbmRlclN0YWdlUHVyY2hhc2UoKSB7XG4gICAgY29uc29sZS5sb2coJ1N0YWdlIHB1cmNoYXNlIHN0YXRlIGFsdGVyZWQhJylcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICgge1xuICAgICAgc3RhZ2VUaHJlZUNvbXBsZXRlOiAhc3RhdGUuc3RhZ2VUaHJlZUNvbXBsZXRlXG4gICAgfSkpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5zdGFnZU9uZUNvbXBsZXRlKSB7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxTdGFnZU9uZSBoYW5kbGVyPXt0aGlzLmhhbmRsZVN1Ym1pdFN0YWdlT25lfSByZW5kZXI9e3RoaXMucmVuZGVyU3RhZ2VUd299IC8+XG4gICAgICApXG4gICAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZS5zdGFnZVR3b0NvbXBsZXRlKSB7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxTdGFnZVR3byBoYW5kbGVyPXt0aGlzLmhhbmRsZVN1Ym1pdFN0YWdlVHdvfSByZW5kZXI9e3RoaXMucmVuZGVyU3RhZ2VUaHJlZX0vPlxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUuc3RhZ2VUaHJlZUNvbXBsZXRlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3RhZ2VUaHJlZSBoYW5kbGVyPXt0aGlzLmhhbmRsZVN1Ym1pdFN0YWdlVGhyZWV9IHJlbmRlcj17dGhpcy5yZW5kZXJTdGFnZVB1cmNoYXNlfS8+XG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxoMT5QVVJDSEFTRSBQQUdFITwvaDE+XG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm07Il19