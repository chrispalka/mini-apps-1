const express = require('express');
const headers = require('./cors.json');
const fs = require('fs');
const path = require('path');
const app = express();
const port = 3000;
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
const { insertRow, queryAll } = require('./db/index.js');

// Serve files to client
app.use(express.static(path.join(__dirname, 'public'))); // serve index.html
app.use(express.static(path.join(__dirname, 'compiled/src'))); // serve transpiled app
app.use(express.static(path.join(__dirname, 'models'))); // serve assets
app.use('/scripts', express.static(path.join(__dirname, '/node_modules/react/dist/'))); // serve react
app.use('/scripts', express.static(path.join(__dirname, '/node_modules/react-dom/dist/'))); // serve react-dom
app.use('/scripts', express.static(path.join(__dirname, '/node_modules/'))); // serve react-dom
app.use('/styles', express.static(path.join(__dirname, '/node_modules/bootstrap/dist/css/'))); // serve bootstrap styles
app.use('/styles', express.static(path.join(__dirname, '/assets/'))); // serve custom styles


app.get('/', (req, res) => {
  res.render('index');
});

app.post('/submit', upload.none(), (req, res) => {
  console.log('request received');
  var username = req.body.username;
  var email = req.body.email;
  var password = req.body.password;
  var addressone = req.body.addressone;
  var addresstwo = req.body.addresstwo;
  var city = req.body.city;
  var state = req.body.state;
  var zip = req.body.zip;
  var phone = req.body.phone;
  var ccnum = req.body.ccnum;
  var expiry = req.body.expiry;
  var ccv = req.body.ccv;
  var billingzip = req.body.billingzip;
  var query = `INSERT INTO users (username,
    email, password, addressone, addresstwo,
    city, state, zip, phone, ccnum, expiry,
    ccv, billingzip) VALUES ('${username}', '${email}', '${password}',
    '${addressone}', '${addresstwo}', '${city}', '${state}', '${zip}', '${phone}',
    '${ccnum}', '${expiry}', '${ccv}', '${billingzip}')`;
  insertRow(query);

  res.set(headers);
  res.status(200).end();
});

app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImhlYWRlcnMiLCJmcyIsInBhdGgiLCJhcHAiLCJwb3J0IiwibXVsdGVyIiwidXBsb2FkIiwiZGVzdCIsImluc2VydFJvdyIsInF1ZXJ5QWxsIiwidXNlIiwic3RhdGljIiwiam9pbiIsIl9fZGlybmFtZSIsImdldCIsInJlcSIsInJlcyIsInJlbmRlciIsInBvc3QiLCJub25lIiwiY29uc29sZSIsImxvZyIsInVzZXJuYW1lIiwiYm9keSIsImVtYWlsIiwicGFzc3dvcmQiLCJhZGRyZXNzb25lIiwiYWRkcmVzc3R3byIsImNpdHkiLCJzdGF0ZSIsInppcCIsInBob25lIiwiY2NudW0iLCJleHBpcnkiLCJjY3YiLCJiaWxsaW5nemlwIiwicXVlcnkiLCJzZXQiLCJzdGF0dXMiLCJlbmQiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLE1BQU1DLFVBQVVELFFBQVEsYUFBUixDQUFoQjtBQUNBLE1BQU1FLEtBQUtGLFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBTUcsT0FBT0gsUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNSSxNQUFNTCxTQUFaO0FBQ0EsTUFBTU0sT0FBTyxJQUFiO0FBQ0EsTUFBTUMsU0FBVU4sUUFBUSxRQUFSLENBQWhCO0FBQ0EsTUFBTU8sU0FBU0QsT0FBTyxFQUFFRSxNQUFNLFVBQVIsRUFBUCxDQUFmO0FBQ0EsTUFBTSxFQUFFQyxTQUFGLEVBQWFDLFFBQWIsS0FBMEJWLFFBQVEsZUFBUixDQUFoQzs7QUFHQTtBQUNBSSxJQUFJTyxHQUFKLENBQVFaLFFBQVFhLE1BQVIsQ0FBZVQsS0FBS1UsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCLENBQWYsQ0FBUixFLENBQXlEO0FBQ3pEVixJQUFJTyxHQUFKLENBQVFaLFFBQVFhLE1BQVIsQ0FBZVQsS0FBS1UsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLGNB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IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IGhlYWRlcnMgPSByZXF1aXJlKCcuL2NvcnMuanNvbicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHBvcnQgPSAzMDAwO1xuY29uc3QgbXVsdGVyICA9IHJlcXVpcmUoJ211bHRlcicpXG5jb25zdCB1cGxvYWQgPSBtdWx0ZXIoeyBkZXN0OiAndXBsb2Fkcy8nIH0pXG5jb25zdCB7IGluc2VydFJvdywgcXVlcnlBbGwgfSA9IHJlcXVpcmUoJy4vZGIvaW5kZXguanMnKTtcblxuXG4vLyBTZXJ2ZSBmaWxlcyB0byBjbGllbnRcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycpKSk7IC8vIHNlcnZlIGluZGV4Lmh0bWxcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ2NvbXBpbGVkL3NyYycpKSk7IC8vIHNlcnZlIHRyYW5zcGlsZWQgYXBwXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdtb2RlbHMnKSkpOyAvLyBzZXJ2ZSBhc3NldHNcbmFwcC51c2UoJy9zY3JpcHRzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy9ub2RlX21vZHVsZXMvcmVhY3QvZGlzdC8nKSkpOyAvLyBzZXJ2ZSByZWFjdFxuYXBwLnVzZSgnL3NjcmlwdHMnLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vZGlzdC8nKSkpOyAvLyBzZXJ2ZSByZWFjdC1kb21cbmFwcC51c2UoJy9zY3JpcHRzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy9ub2RlX21vZHVsZXMvJykpKTsgLy8gc2VydmUgcmVhY3QtZG9tXG5hcHAudXNlKCcvc3R5bGVzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzLycpKSk7IC8vIHNlcnZlIGJvb3RzdHJhcCBzdHlsZXNcbmFwcC51c2UoJy9zdHlsZXMnLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnL2Fzc2V0cy8nKSkpOyAvLyBzZXJ2ZSBjdXN0b20gc3R5bGVzXG5cblxuYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xuICByZXMucmVuZGVyKCdpbmRleCcpO1xufSlcblxuYXBwLnBvc3QoJy9zdWJtaXQnLCB1cGxvYWQubm9uZSgpLCAocmVxLCByZXMpID0+IHtcbiAgY29uc29sZS5sb2coJ3JlcXVlc3QgcmVjZWl2ZWQnKVxuICB2YXIgdXNlcm5hbWUgPSByZXEuYm9keS51c2VybmFtZTtcbiAgdmFyIGVtYWlsID0gcmVxLmJvZHkuZW1haWw7XG4gIHZhciBwYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkO1xuICB2YXIgYWRkcmVzc29uZSA9IHJlcS5ib2R5LmFkZHJlc3NvbmU7XG4gIHZhciBhZGRyZXNzdHdvID0gcmVxLmJvZHkuYWRkcmVzc3R3bztcbiAgdmFyIGNpdHkgPSByZXEuYm9keS5jaXR5O1xuICB2YXIgc3RhdGUgPSByZXEuYm9keS5zdGF0ZTtcbiAgdmFyIHppcCA9IHJlcS5ib2R5LnppcDtcbiAgdmFyIHBob25lID0gcmVxLmJvZHkucGhvbmU7XG4gIHZhciBjY251bSA9IHJlcS5ib2R5LmNjbnVtO1xuICB2YXIgZXhwaXJ5ID0gcmVxLmJvZHkuZXhwaXJ5O1xuICB2YXIgY2N2ID0gcmVxLmJvZHkuY2N2O1xuICB2YXIgYmlsbGluZ3ppcCA9IHJlcS5ib2R5LmJpbGxpbmd6aXA7XG4gIHZhciBxdWVyeSA9IGBJTlNFUlQgSU5UTyB1c2VycyAodXNlcm5hbWUsXG4gICAgZW1haWwsIHBhc3N3b3JkLCBhZGRyZXNzb25lLCBhZGRyZXNzdHdvLFxuICAgIGNpdHksIHN0YXRlLCB6aXAsIHBob25lLCBjY251bSwgZXhwaXJ5LFxuICAgIGNjdiwgYmlsbGluZ3ppcCkgVkFMVUVTICgnJHt1c2VybmFtZX0nLCAnJHtlbWFpbH0nLCAnJHtwYXNzd29yZH0nLFxuICAgICcke2FkZHJlc3NvbmV9JywgJyR7YWRkcmVzc3R3b30nLCAnJHtjaXR5fScsICcke3N0YXRlfScsICcke3ppcH0nLCAnJHtwaG9uZX0nLFxuICAgICcke2NjbnVtfScsICcke2V4cGlyeX0nLCAnJHtjY3Z9JywgJyR7YmlsbGluZ3ppcH0nKWA7XG4gIGluc2VydFJvdyhxdWVyeSlcblxuICByZXMuc2V0KGhlYWRlcnMpXG4gIHJlcy5zdGF0dXMoMjAwKS5lbmQoKVxufSlcblxuXG5cblxuXG5cbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4gY29uc29sZS5sb2coYEV4YW1wbGUgYXBwIGxpc3RlbmluZyBhdCBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH1gKSlcblxuXG4iXX0=